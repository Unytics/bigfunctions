type: function_sql
category: AI_alpha
author:
  name: Paul Marcombes
  url: https://www.linkedin.com/in/paul-marcombes
  avatar_url: "https://lh3.googleusercontent.com/a-/ACB-R5RDf2yxcw1p_IYLCKmiUIScreatDdhG8B83om6Ohw=s260"
description: |
  Generate a `sql_query` from a `natual_language_query` on `table`
  .

  `table` is a table whose schema
  will be extracted from INFORMATION_SCHEMA
  to give context to the generative AI model.

  Thus, for this function to work:

  - `table` format must be like `DATASET.TABLE` with no specified project.
  - `table` must exist in the project you use for making queries.
  - You must have read permission on INFORMATION_SCHEMA.COLUMNS at project level (get BigQuery Admin role if you are not sure)
arguments:
  - name: natual_language_query
    type: string
  - name: table
    type: any type
output:
  name: sql_query
  type: string
examples:
  - description: ""
    arguments:
      - |

        '''
        compute how much
        each customer spent by day
        in the latest 90 days.
        '''
      - "'YOUR_DATASET.YOUR_TABLE'"
    output: |
      SELECT
        customer_id,
        DATE(issued_at) AS day,
        SUM(amount) AS total_spent
      FROM YOUR_DATASET.YOUR_TABLE
      WHERE issued_at >= TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL 90 DAY)
      GROUP BY customer_id, day
      ORDER BY customer_id, day
    region: ALL
code: |
  (
    select

      array_to_string(array_agg(distinct table_name), ', ')

      # ifnull(
      #   regexp_replace(regexp_replace(regexp_replace(

      #     bigfunctions.eu.ask_bison(
      #       'Question: '|| replace(natual_language_query, '\n', ' ') || '\n' ||
      #       'Table: '   || table  || '\n' ||
      #       'Columns: ' || array_to_string(array_agg(column_name), ', ')  || '\n' ||
      #       'Answer: '  || 'bigquery sql query'
      #     )

      #     , '^```sql\n', '')
      #     , '^```\n', '')
      #     , '\n```$', ''
      #   )

      #   , 'TABLE NOT FOUND IN CURRENT PROJECT')

    from `region-eu`.INFORMATION_SCHEMA.COLUMNS
    # where (table_schema || '.' || table_name) = table
  )
