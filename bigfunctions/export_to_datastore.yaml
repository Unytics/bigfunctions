type: function_py
category: export
author:
  name: El-Walid
  url: https://www.linkedin.com/in/el-walid/
  avatar_url: https://media.licdn.com/dms/image/C4E03AQH6oIAxScy4gw/profile-displayphoto-shrink_800_800/0/1654708759415?e=1691625600&v=beta&t=U6Tgwl4JWamN4qYDJP2b498aJt5thWog84-qnbkz0bU
description: |
  Exports `data` to Datastore
  (Firestore in Datastore mode).

  (ðŸ’¡ *For this to work, `749389685934-compute@developer.gserviceaccount.com` must have datastore user role in your project.*)

  | Param       | Possible values  |
  |-------------|---|
  | `project`   | Google Cloud project hosting the Datastore data. Should be unique for one query  |
  | `namespace` | A namespace is like a dataset / a folder. It has many `kinds` which are like tables. If `namespace`is `null`, `default` namespace will be used. |
  | `kind`      | `kind` is like a table: a set of similar objects. Cannot be `null`. |
  | `key`       | Unique identifier where `data` is stored inside `kind`. Can be an integer represented as a string (`key` is then named `id` in Datastore) or any string (`key` is named `name` in Datastore). If `null` a integer key (represented as string) will be generated. |
  | `data`      | A json dict of data  |
arguments:
  - name: project
    type: string
  - name: namespace
    type: string
  - name: kind
    type: string
  - name: key
    type: string
  - name: data
    type: json
output:
  name: key
  type: string
examples:
  - description: Export `data` to default namespace with auto-generated `key`.
    arguments:
      - "'your-project'"
      - "null"
      - "'user'"
      - "null"
      - "json '{\"name\": \"Marc Harris\", \"email\": \"marc@harris.com\"}'"
    output: "4503604769587200"
  - description: Export `data` to default namespace, with email as `key`.
    arguments:
      - "'your-project'"
      - "null"
      - "'user'"
      - "'marc@harris.com'"
      - "json '{\"name\": \"Marc Harris\"}'"
    output: "marc@harris.com"
code_process_rows_as_batch: true
code: |
  import google.cloud.datastore
  import google.api_core.exceptions

  store = None
  entities = []
  for row in rows:
    project, namespace, kind, key, data = row

    if store is None:
      store = google.cloud.datastore.Client(project=project)
      _project = project
    elif project != _project:
      assert False, "`project` for all rows must be equal"

    if key:
      try:
        key = int(key)
      except:
        pass
      entity_key = store.key(kind, key, namespace=namespace)
    else:
      entity_key = store.key(kind, namespace=namespace)

    entity = google.cloud.datastore.Entity(entity_key)
    entity.update(data)
    entities.append(entity)

  store.put_multi(entities)
  return [str(entity.key.id_or_name) for entity in entities]
requirements: |
  google-cloud-datastore
cloud_run:
  memory: 512Mi
  concurrency: 16
  max_instances: 10
quotas:
  max_rows_per_user_per_day: 1000000
